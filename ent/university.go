// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awesomeProject1/ent/university"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// University is the model entity for the University schema.
type University struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// EstablishedDate holds the value of the "established_date" field.
	EstablishedDate time.Time `json:"established_date,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*University) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case university.FieldID:
			values[i] = new(sql.NullInt64)
		case university.FieldName, university.FieldLocation:
			values[i] = new(sql.NullString)
		case university.FieldEstablishedDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the University fields.
func (u *University) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case university.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case university.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case university.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				u.Location = value.String
			}
		case university.FieldEstablishedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field established_date", values[i])
			} else if value.Valid {
				u.EstablishedDate = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the University.
// This includes values selected through modifiers, order, etc.
func (u *University) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// Update returns a builder for updating this University.
// Note that you need to call University.Unwrap() before calling this method if this University
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *University) Update() *UniversityUpdateOne {
	return NewUniversityClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the University entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *University) Unwrap() *University {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: University is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *University) String() string {
	var builder strings.Builder
	builder.WriteString("University(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(u.Location)
	builder.WriteString(", ")
	builder.WriteString("established_date=")
	builder.WriteString(u.EstablishedDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Universities is a parsable slice of University.
type Universities []*University
