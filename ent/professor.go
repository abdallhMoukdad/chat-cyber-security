// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awesomeProject1/ent/chat"
	"awesomeProject1/ent/message"
	"awesomeProject1/ent/professor"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Professor is the model entity for the Professor schema.
type Professor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// HireDate holds the value of the "hire_date" field.
	HireDate time.Time `json:"hire_date,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfessorQuery when eager-loading is set.
	Edges        ProfessorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProfessorEdges holds the relations/edges for other nodes in the graph.
type ProfessorEdges struct {
	// Chats holds the value of the chats edge.
	Chats *Chat `json:"chats,omitempty"`
	// ReceivedMessages holds the value of the received_messages edge.
	ReceivedMessages *Message `json:"received_messages,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ChatsOrErr returns the Chats value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfessorEdges) ChatsOrErr() (*Chat, error) {
	if e.loadedTypes[0] {
		if e.Chats == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: chat.Label}
		}
		return e.Chats, nil
	}
	return nil, &NotLoadedError{edge: "chats"}
}

// ReceivedMessagesOrErr returns the ReceivedMessages value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfessorEdges) ReceivedMessagesOrErr() (*Message, error) {
	if e.loadedTypes[1] {
		if e.ReceivedMessages == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: message.Label}
		}
		return e.ReceivedMessages, nil
	}
	return nil, &NotLoadedError{edge: "received_messages"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Professor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case professor.FieldID:
			values[i] = new(sql.NullInt64)
		case professor.FieldName, professor.FieldPassword:
			values[i] = new(sql.NullString)
		case professor.FieldHireDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Professor fields.
func (pr *Professor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case professor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case professor.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case professor.FieldHireDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field hire_date", values[i])
			} else if value.Valid {
				pr.HireDate = value.Time
			}
		case professor.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				pr.Password = value.String
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Professor.
// This includes values selected through modifiers, order, etc.
func (pr *Professor) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryChats queries the "chats" edge of the Professor entity.
func (pr *Professor) QueryChats() *ChatQuery {
	return NewProfessorClient(pr.config).QueryChats(pr)
}

// QueryReceivedMessages queries the "received_messages" edge of the Professor entity.
func (pr *Professor) QueryReceivedMessages() *MessageQuery {
	return NewProfessorClient(pr.config).QueryReceivedMessages(pr)
}

// Update returns a builder for updating this Professor.
// Note that you need to call Professor.Unwrap() before calling this method if this Professor
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Professor) Update() *ProfessorUpdateOne {
	return NewProfessorClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Professor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Professor) Unwrap() *Professor {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Professor is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Professor) String() string {
	var builder strings.Builder
	builder.WriteString("Professor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("hire_date=")
	builder.WriteString(pr.HireDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(pr.Password)
	builder.WriteByte(')')
	return builder.String()
}

// Professors is a parsable slice of Professor.
type Professors []*Professor
