// Code generated by ent, DO NOT EDIT.

package university

import (
	"awesomeProject1/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.University {
	return predicate.University(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.University {
	return predicate.University(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.University {
	return predicate.University(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.University {
	return predicate.University(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.University {
	return predicate.University(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.University {
	return predicate.University(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.University {
	return predicate.University(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.University {
	return predicate.University(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.University {
	return predicate.University(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.University {
	return predicate.University(sql.FieldEQ(FieldName, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.University {
	return predicate.University(sql.FieldEQ(FieldLocation, v))
}

// EstablishedDate applies equality check predicate on the "established_date" field. It's identical to EstablishedDateEQ.
func EstablishedDate(v time.Time) predicate.University {
	return predicate.University(sql.FieldEQ(FieldEstablishedDate, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.University {
	return predicate.University(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.University {
	return predicate.University(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.University {
	return predicate.University(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.University {
	return predicate.University(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.University {
	return predicate.University(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.University {
	return predicate.University(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.University {
	return predicate.University(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.University {
	return predicate.University(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.University {
	return predicate.University(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.University {
	return predicate.University(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.University {
	return predicate.University(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.University {
	return predicate.University(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.University {
	return predicate.University(sql.FieldContainsFold(FieldName, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.University {
	return predicate.University(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.University {
	return predicate.University(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.University {
	return predicate.University(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.University {
	return predicate.University(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.University {
	return predicate.University(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.University {
	return predicate.University(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.University {
	return predicate.University(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.University {
	return predicate.University(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.University {
	return predicate.University(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.University {
	return predicate.University(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.University {
	return predicate.University(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.University {
	return predicate.University(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.University {
	return predicate.University(sql.FieldContainsFold(FieldLocation, v))
}

// EstablishedDateEQ applies the EQ predicate on the "established_date" field.
func EstablishedDateEQ(v time.Time) predicate.University {
	return predicate.University(sql.FieldEQ(FieldEstablishedDate, v))
}

// EstablishedDateNEQ applies the NEQ predicate on the "established_date" field.
func EstablishedDateNEQ(v time.Time) predicate.University {
	return predicate.University(sql.FieldNEQ(FieldEstablishedDate, v))
}

// EstablishedDateIn applies the In predicate on the "established_date" field.
func EstablishedDateIn(vs ...time.Time) predicate.University {
	return predicate.University(sql.FieldIn(FieldEstablishedDate, vs...))
}

// EstablishedDateNotIn applies the NotIn predicate on the "established_date" field.
func EstablishedDateNotIn(vs ...time.Time) predicate.University {
	return predicate.University(sql.FieldNotIn(FieldEstablishedDate, vs...))
}

// EstablishedDateGT applies the GT predicate on the "established_date" field.
func EstablishedDateGT(v time.Time) predicate.University {
	return predicate.University(sql.FieldGT(FieldEstablishedDate, v))
}

// EstablishedDateGTE applies the GTE predicate on the "established_date" field.
func EstablishedDateGTE(v time.Time) predicate.University {
	return predicate.University(sql.FieldGTE(FieldEstablishedDate, v))
}

// EstablishedDateLT applies the LT predicate on the "established_date" field.
func EstablishedDateLT(v time.Time) predicate.University {
	return predicate.University(sql.FieldLT(FieldEstablishedDate, v))
}

// EstablishedDateLTE applies the LTE predicate on the "established_date" field.
func EstablishedDateLTE(v time.Time) predicate.University {
	return predicate.University(sql.FieldLTE(FieldEstablishedDate, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.University) predicate.University {
	return predicate.University(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.University) predicate.University {
	return predicate.University(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.University) predicate.University {
	return predicate.University(sql.NotPredicates(p))
}
