// Code generated by ent, DO NOT EDIT.

package university

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the university type in the database.
	Label = "university"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldEstablishedDate holds the string denoting the established_date field in the database.
	FieldEstablishedDate = "established_date"
	// Table holds the table name of the university in the database.
	Table = "universities"
)

// Columns holds all SQL columns for university fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldLocation,
	FieldEstablishedDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// LocationValidator is a validator for the "location" field. It is called by the builders before save.
	LocationValidator func(string) error
	// DefaultEstablishedDate holds the default value on creation for the "established_date" field.
	DefaultEstablishedDate func() time.Time
)

// OrderOption defines the ordering options for the University queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByEstablishedDate orders the results by the established_date field.
func ByEstablishedDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEstablishedDate, opts...).ToFunc()
}
