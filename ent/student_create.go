// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awesomeProject1/ent/chat"
	"awesomeProject1/ent/message"
	"awesomeProject1/ent/student"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StudentCreate is the builder for creating a Student entity.
type StudentCreate struct {
	config
	mutation *StudentMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sc *StudentCreate) SetName(s string) *StudentCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (sc *StudentCreate) SetNillableName(s *string) *StudentCreate {
	if s != nil {
		sc.SetName(*s)
	}
	return sc
}

// SetEnrollmentDate sets the "enrollment_date" field.
func (sc *StudentCreate) SetEnrollmentDate(t time.Time) *StudentCreate {
	sc.mutation.SetEnrollmentDate(t)
	return sc
}

// SetNillableEnrollmentDate sets the "enrollment_date" field if the given value is not nil.
func (sc *StudentCreate) SetNillableEnrollmentDate(t *time.Time) *StudentCreate {
	if t != nil {
		sc.SetEnrollmentDate(*t)
	}
	return sc
}

// SetPassword sets the "password" field.
func (sc *StudentCreate) SetPassword(s string) *StudentCreate {
	sc.mutation.SetPassword(s)
	return sc
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (sc *StudentCreate) SetNillablePassword(s *string) *StudentCreate {
	if s != nil {
		sc.SetPassword(*s)
	}
	return sc
}

// SetNationalNumber sets the "national_number" field.
func (sc *StudentCreate) SetNationalNumber(s string) *StudentCreate {
	sc.mutation.SetNationalNumber(s)
	return sc
}

// SetNillableNationalNumber sets the "national_number" field if the given value is not nil.
func (sc *StudentCreate) SetNillableNationalNumber(s *string) *StudentCreate {
	if s != nil {
		sc.SetNationalNumber(*s)
	}
	return sc
}

// SetPhoneNumber sets the "phone_number" field.
func (sc *StudentCreate) SetPhoneNumber(s string) *StudentCreate {
	sc.mutation.SetPhoneNumber(s)
	return sc
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (sc *StudentCreate) SetNillablePhoneNumber(s *string) *StudentCreate {
	if s != nil {
		sc.SetPhoneNumber(*s)
	}
	return sc
}

// SetHomeLocation sets the "home_location" field.
func (sc *StudentCreate) SetHomeLocation(s string) *StudentCreate {
	sc.mutation.SetHomeLocation(s)
	return sc
}

// SetNillableHomeLocation sets the "home_location" field if the given value is not nil.
func (sc *StudentCreate) SetNillableHomeLocation(s *string) *StudentCreate {
	if s != nil {
		sc.SetHomeLocation(*s)
	}
	return sc
}

// SetEnycrptionKey sets the "enycrption_key" field.
func (sc *StudentCreate) SetEnycrptionKey(s string) *StudentCreate {
	sc.mutation.SetEnycrptionKey(s)
	return sc
}

// SetNillableEnycrptionKey sets the "enycrption_key" field if the given value is not nil.
func (sc *StudentCreate) SetNillableEnycrptionKey(s *string) *StudentCreate {
	if s != nil {
		sc.SetEnycrptionKey(*s)
	}
	return sc
}

// SetChatsID sets the "chats" edge to the Chat entity by ID.
func (sc *StudentCreate) SetChatsID(id int) *StudentCreate {
	sc.mutation.SetChatsID(id)
	return sc
}

// SetNillableChatsID sets the "chats" edge to the Chat entity by ID if the given value is not nil.
func (sc *StudentCreate) SetNillableChatsID(id *int) *StudentCreate {
	if id != nil {
		sc = sc.SetChatsID(*id)
	}
	return sc
}

// SetChats sets the "chats" edge to the Chat entity.
func (sc *StudentCreate) SetChats(c *Chat) *StudentCreate {
	return sc.SetChatsID(c.ID)
}

// SetSentMessagesID sets the "sent_messages" edge to the Message entity by ID.
func (sc *StudentCreate) SetSentMessagesID(id int) *StudentCreate {
	sc.mutation.SetSentMessagesID(id)
	return sc
}

// SetNillableSentMessagesID sets the "sent_messages" edge to the Message entity by ID if the given value is not nil.
func (sc *StudentCreate) SetNillableSentMessagesID(id *int) *StudentCreate {
	if id != nil {
		sc = sc.SetSentMessagesID(*id)
	}
	return sc
}

// SetSentMessages sets the "sent_messages" edge to the Message entity.
func (sc *StudentCreate) SetSentMessages(m *Message) *StudentCreate {
	return sc.SetSentMessagesID(m.ID)
}

// Mutation returns the StudentMutation object of the builder.
func (sc *StudentCreate) Mutation() *StudentMutation {
	return sc.mutation
}

// Save creates the Student in the database.
func (sc *StudentCreate) Save(ctx context.Context) (*Student, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StudentCreate) SaveX(ctx context.Context) *Student {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StudentCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StudentCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StudentCreate) defaults() {
	if _, ok := sc.mutation.Name(); !ok {
		v := student.DefaultName
		sc.mutation.SetName(v)
	}
	if _, ok := sc.mutation.EnrollmentDate(); !ok {
		v := student.DefaultEnrollmentDate()
		sc.mutation.SetEnrollmentDate(v)
	}
	if _, ok := sc.mutation.Password(); !ok {
		v := student.DefaultPassword
		sc.mutation.SetPassword(v)
	}
	if _, ok := sc.mutation.NationalNumber(); !ok {
		v := student.DefaultNationalNumber
		sc.mutation.SetNationalNumber(v)
	}
	if _, ok := sc.mutation.PhoneNumber(); !ok {
		v := student.DefaultPhoneNumber
		sc.mutation.SetPhoneNumber(v)
	}
	if _, ok := sc.mutation.HomeLocation(); !ok {
		v := student.DefaultHomeLocation
		sc.mutation.SetHomeLocation(v)
	}
	if _, ok := sc.mutation.EnycrptionKey(); !ok {
		v := student.DefaultEnycrptionKey
		sc.mutation.SetEnycrptionKey(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StudentCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Student.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := student.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Student.name": %w`, err)}
		}
	}
	if _, ok := sc.mutation.EnrollmentDate(); !ok {
		return &ValidationError{Name: "enrollment_date", err: errors.New(`ent: missing required field "Student.enrollment_date"`)}
	}
	if _, ok := sc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "Student.password"`)}
	}
	if _, ok := sc.mutation.NationalNumber(); !ok {
		return &ValidationError{Name: "national_number", err: errors.New(`ent: missing required field "Student.national_number"`)}
	}
	if _, ok := sc.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`ent: missing required field "Student.phone_number"`)}
	}
	if _, ok := sc.mutation.HomeLocation(); !ok {
		return &ValidationError{Name: "home_location", err: errors.New(`ent: missing required field "Student.home_location"`)}
	}
	if _, ok := sc.mutation.EnycrptionKey(); !ok {
		return &ValidationError{Name: "enycrption_key", err: errors.New(`ent: missing required field "Student.enycrption_key"`)}
	}
	return nil
}

func (sc *StudentCreate) sqlSave(ctx context.Context) (*Student, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StudentCreate) createSpec() (*Student, *sqlgraph.CreateSpec) {
	var (
		_node = &Student{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(student.Table, sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(student.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.EnrollmentDate(); ok {
		_spec.SetField(student.FieldEnrollmentDate, field.TypeTime, value)
		_node.EnrollmentDate = value
	}
	if value, ok := sc.mutation.Password(); ok {
		_spec.SetField(student.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := sc.mutation.NationalNumber(); ok {
		_spec.SetField(student.FieldNationalNumber, field.TypeString, value)
		_node.NationalNumber = value
	}
	if value, ok := sc.mutation.PhoneNumber(); ok {
		_spec.SetField(student.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := sc.mutation.HomeLocation(); ok {
		_spec.SetField(student.FieldHomeLocation, field.TypeString, value)
		_node.HomeLocation = value
	}
	if value, ok := sc.mutation.EnycrptionKey(); ok {
		_spec.SetField(student.FieldEnycrptionKey, field.TypeString, value)
		_node.EnycrptionKey = value
	}
	if nodes := sc.mutation.ChatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   student.ChatsTable,
			Columns: []string{student.ChatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SentMessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   student.SentMessagesTable,
			Columns: []string{student.SentMessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StudentCreateBulk is the builder for creating many Student entities in bulk.
type StudentCreateBulk struct {
	config
	err      error
	builders []*StudentCreate
}

// Save creates the Student entities in the database.
func (scb *StudentCreateBulk) Save(ctx context.Context) ([]*Student, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Student, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StudentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StudentCreateBulk) SaveX(ctx context.Context) []*Student {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StudentCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StudentCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
