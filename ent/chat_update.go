// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awesomeProject1/ent/chat"
	"awesomeProject1/ent/message"
	"awesomeProject1/ent/predicate"
	"awesomeProject1/ent/professor"
	"awesomeProject1/ent/student"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ChatUpdate is the builder for updating Chat entities.
type ChatUpdate struct {
	config
	hooks    []Hook
	mutation *ChatMutation
}

// Where appends a list predicates to the ChatUpdate builder.
func (cu *ChatUpdate) Where(ps ...predicate.Chat) *ChatUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (cu *ChatUpdate) SetStudentID(id int) *ChatUpdate {
	cu.mutation.SetStudentID(id)
	return cu
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (cu *ChatUpdate) SetNillableStudentID(id *int) *ChatUpdate {
	if id != nil {
		cu = cu.SetStudentID(*id)
	}
	return cu
}

// SetStudent sets the "student" edge to the Student entity.
func (cu *ChatUpdate) SetStudent(s *Student) *ChatUpdate {
	return cu.SetStudentID(s.ID)
}

// SetProfessorID sets the "professor" edge to the Professor entity by ID.
func (cu *ChatUpdate) SetProfessorID(id int) *ChatUpdate {
	cu.mutation.SetProfessorID(id)
	return cu
}

// SetNillableProfessorID sets the "professor" edge to the Professor entity by ID if the given value is not nil.
func (cu *ChatUpdate) SetNillableProfessorID(id *int) *ChatUpdate {
	if id != nil {
		cu = cu.SetProfessorID(*id)
	}
	return cu
}

// SetProfessor sets the "professor" edge to the Professor entity.
func (cu *ChatUpdate) SetProfessor(p *Professor) *ChatUpdate {
	return cu.SetProfessorID(p.ID)
}

// SetMessagesID sets the "messages" edge to the Message entity by ID.
func (cu *ChatUpdate) SetMessagesID(id int) *ChatUpdate {
	cu.mutation.SetMessagesID(id)
	return cu
}

// SetNillableMessagesID sets the "messages" edge to the Message entity by ID if the given value is not nil.
func (cu *ChatUpdate) SetNillableMessagesID(id *int) *ChatUpdate {
	if id != nil {
		cu = cu.SetMessagesID(*id)
	}
	return cu
}

// SetMessages sets the "messages" edge to the Message entity.
func (cu *ChatUpdate) SetMessages(m *Message) *ChatUpdate {
	return cu.SetMessagesID(m.ID)
}

// Mutation returns the ChatMutation object of the builder.
func (cu *ChatUpdate) Mutation() *ChatMutation {
	return cu.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (cu *ChatUpdate) ClearStudent() *ChatUpdate {
	cu.mutation.ClearStudent()
	return cu
}

// ClearProfessor clears the "professor" edge to the Professor entity.
func (cu *ChatUpdate) ClearProfessor() *ChatUpdate {
	cu.mutation.ClearProfessor()
	return cu
}

// ClearMessages clears the "messages" edge to the Message entity.
func (cu *ChatUpdate) ClearMessages() *ChatUpdate {
	cu.mutation.ClearMessages()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ChatUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ChatUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ChatUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ChatUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ChatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(chat.Table, chat.Columns, sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chat.StudentTable,
			Columns: []string{chat.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chat.StudentTable,
			Columns: []string{chat.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ProfessorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chat.ProfessorTable,
			Columns: []string{chat.ProfessorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ProfessorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chat.ProfessorTable,
			Columns: []string{chat.ProfessorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chat.MessagesTable,
			Columns: []string{chat.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chat.MessagesTable,
			Columns: []string{chat.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ChatUpdateOne is the builder for updating a single Chat entity.
type ChatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatMutation
}

// SetStudentID sets the "student" edge to the Student entity by ID.
func (cuo *ChatUpdateOne) SetStudentID(id int) *ChatUpdateOne {
	cuo.mutation.SetStudentID(id)
	return cuo
}

// SetNillableStudentID sets the "student" edge to the Student entity by ID if the given value is not nil.
func (cuo *ChatUpdateOne) SetNillableStudentID(id *int) *ChatUpdateOne {
	if id != nil {
		cuo = cuo.SetStudentID(*id)
	}
	return cuo
}

// SetStudent sets the "student" edge to the Student entity.
func (cuo *ChatUpdateOne) SetStudent(s *Student) *ChatUpdateOne {
	return cuo.SetStudentID(s.ID)
}

// SetProfessorID sets the "professor" edge to the Professor entity by ID.
func (cuo *ChatUpdateOne) SetProfessorID(id int) *ChatUpdateOne {
	cuo.mutation.SetProfessorID(id)
	return cuo
}

// SetNillableProfessorID sets the "professor" edge to the Professor entity by ID if the given value is not nil.
func (cuo *ChatUpdateOne) SetNillableProfessorID(id *int) *ChatUpdateOne {
	if id != nil {
		cuo = cuo.SetProfessorID(*id)
	}
	return cuo
}

// SetProfessor sets the "professor" edge to the Professor entity.
func (cuo *ChatUpdateOne) SetProfessor(p *Professor) *ChatUpdateOne {
	return cuo.SetProfessorID(p.ID)
}

// SetMessagesID sets the "messages" edge to the Message entity by ID.
func (cuo *ChatUpdateOne) SetMessagesID(id int) *ChatUpdateOne {
	cuo.mutation.SetMessagesID(id)
	return cuo
}

// SetNillableMessagesID sets the "messages" edge to the Message entity by ID if the given value is not nil.
func (cuo *ChatUpdateOne) SetNillableMessagesID(id *int) *ChatUpdateOne {
	if id != nil {
		cuo = cuo.SetMessagesID(*id)
	}
	return cuo
}

// SetMessages sets the "messages" edge to the Message entity.
func (cuo *ChatUpdateOne) SetMessages(m *Message) *ChatUpdateOne {
	return cuo.SetMessagesID(m.ID)
}

// Mutation returns the ChatMutation object of the builder.
func (cuo *ChatUpdateOne) Mutation() *ChatMutation {
	return cuo.mutation
}

// ClearStudent clears the "student" edge to the Student entity.
func (cuo *ChatUpdateOne) ClearStudent() *ChatUpdateOne {
	cuo.mutation.ClearStudent()
	return cuo
}

// ClearProfessor clears the "professor" edge to the Professor entity.
func (cuo *ChatUpdateOne) ClearProfessor() *ChatUpdateOne {
	cuo.mutation.ClearProfessor()
	return cuo
}

// ClearMessages clears the "messages" edge to the Message entity.
func (cuo *ChatUpdateOne) ClearMessages() *ChatUpdateOne {
	cuo.mutation.ClearMessages()
	return cuo
}

// Where appends a list predicates to the ChatUpdate builder.
func (cuo *ChatUpdateOne) Where(ps ...predicate.Chat) *ChatUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ChatUpdateOne) Select(field string, fields ...string) *ChatUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Chat entity.
func (cuo *ChatUpdateOne) Save(ctx context.Context) (*Chat, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ChatUpdateOne) SaveX(ctx context.Context) *Chat {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ChatUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ChatUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ChatUpdateOne) sqlSave(ctx context.Context) (_node *Chat, err error) {
	_spec := sqlgraph.NewUpdateSpec(chat.Table, chat.Columns, sqlgraph.NewFieldSpec(chat.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Chat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chat.FieldID)
		for _, f := range fields {
			if !chat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuo.mutation.StudentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chat.StudentTable,
			Columns: []string{chat.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.StudentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chat.StudentTable,
			Columns: []string{chat.StudentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ProfessorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chat.ProfessorTable,
			Columns: []string{chat.ProfessorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ProfessorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   chat.ProfessorTable,
			Columns: []string{chat.ProfessorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(professor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chat.MessagesTable,
			Columns: []string{chat.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   chat.MessagesTable,
			Columns: []string{chat.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Chat{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
