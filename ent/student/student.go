// Code generated by ent, DO NOT EDIT.

package student

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the student type in the database.
	Label = "student"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEnrollmentDate holds the string denoting the enrollment_date field in the database.
	FieldEnrollmentDate = "enrollment_date"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldNationalNumber holds the string denoting the national_number field in the database.
	FieldNationalNumber = "national_number"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldHomeLocation holds the string denoting the home_location field in the database.
	FieldHomeLocation = "home_location"
	// EdgeChats holds the string denoting the chats edge name in mutations.
	EdgeChats = "chats"
	// EdgeSentMessages holds the string denoting the sent_messages edge name in mutations.
	EdgeSentMessages = "sent_messages"
	// Table holds the table name of the student in the database.
	Table = "students"
	// ChatsTable is the table that holds the chats relation/edge.
	ChatsTable = "chats"
	// ChatsInverseTable is the table name for the Chat entity.
	// It exists in this package in order to avoid circular dependency with the "chat" package.
	ChatsInverseTable = "chats"
	// ChatsColumn is the table column denoting the chats relation/edge.
	ChatsColumn = "student_chats"
	// SentMessagesTable is the table that holds the sent_messages relation/edge.
	SentMessagesTable = "messages"
	// SentMessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	SentMessagesInverseTable = "messages"
	// SentMessagesColumn is the table column denoting the sent_messages relation/edge.
	SentMessagesColumn = "student_sent_messages"
)

// Columns holds all SQL columns for student fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEnrollmentDate,
	FieldPassword,
	FieldNationalNumber,
	FieldPhoneNumber,
	FieldHomeLocation,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultEnrollmentDate holds the default value on creation for the "enrollment_date" field.
	DefaultEnrollmentDate func() time.Time
	// DefaultPassword holds the default value on creation for the "password" field.
	DefaultPassword string
	// DefaultNationalNumber holds the default value on creation for the "national_number" field.
	DefaultNationalNumber string
	// DefaultPhoneNumber holds the default value on creation for the "phone_number" field.
	DefaultPhoneNumber string
	// DefaultHomeLocation holds the default value on creation for the "home_location" field.
	DefaultHomeLocation string
)

// OrderOption defines the ordering options for the Student queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEnrollmentDate orders the results by the enrollment_date field.
func ByEnrollmentDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnrollmentDate, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByNationalNumber orders the results by the national_number field.
func ByNationalNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNationalNumber, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByHomeLocation orders the results by the home_location field.
func ByHomeLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHomeLocation, opts...).ToFunc()
}

// ByChatsField orders the results by chats field.
func ByChatsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChatsStep(), sql.OrderByField(field, opts...))
	}
}

// BySentMessagesField orders the results by sent_messages field.
func BySentMessagesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSentMessagesStep(), sql.OrderByField(field, opts...))
	}
}
func newChatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ChatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, ChatsTable, ChatsColumn),
	)
}
func newSentMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SentMessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SentMessagesTable, SentMessagesColumn),
	)
}
